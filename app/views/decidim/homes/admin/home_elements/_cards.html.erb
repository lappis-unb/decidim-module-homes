<%= f.fields_for :properties do |participatory_cards_form| %>
  <%=
    participatory_cards_form.text_field :title,
    label: "Título da seção",
    value: @home_element.properties["title"]
  %>

  <% card_type = @home_element.properties.try(:[], "card_type") %>
  <%= 
    participatory_cards_form.select :card_type,
    options_for_select(
      @available_card_types,
      card_type == nil ? @available_card_types.first : card_type
    ),
    label: "Tipo de Card",
    help_text: "Ao selecionar o tipo de card, todos os cards diferentes serão removidos"
  %>

  <ul 
    id="dynamic__inputs-container" class="card draggable-list"
    type="<%= @home_element.element_type %>"
    items="<%= @home_element.properties["items"].to_json %>"
  ></ul>
  
  <div class="add-form-button-container">
    <button class="button" id="add-form-button"> 
      Adicionar Card
    </button>
  </div>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('dynamic__inputs-container');
    const items = JSON.parse(container.getAttribute('items'));
    const cardTypeSelect = document.getElementById('home_elements_properties_card_type');
    let cardType = cardTypeSelect.value;
    const button = document.getElementById('add-form-button');
    const sortableList = document.getElementById("dynamic__inputs-container");
    let draggedItem = null;

    cardTypeSelect.addEventListener('change', (event) => {
      cardType = event.target.value;
      let cards = document.getElementsByClassName('dynamic-form');
      cards = Array.from(cards);

      cards.forEach(card => {
        if (card.getAttribute('card-type') !== cardType) {
          card.parentNode.removeChild(card);
        }
      });
    });

    sortableList.addEventListener(
      "dragstart",
      (e) => {
        draggedItem = e.target;
        setTimeout(() => {
          e.target.style.display =
            "none";
        }, 0);
    });

    sortableList.addEventListener(
      "dragend",
      (e) => {
        setTimeout(() => {
          e.target.style.display = "";
          draggedItem = null;
        }, 0);
        let items = container.childNodes;

        items.forEach((item, index) => {
          item.querySelector(".card-title").innerHTML = `Card #${index + 1}`;
          item.querySelector(".dynamic-weight").value = index;
        });
    });

    sortableList.addEventListener(
      "dragover",
      (e) => {
        e.preventDefault();
        const afterElement =
          getDragAfterElement(
            sortableList,
            e.clientY);
        const currentElement =
          document.querySelector(
            ".dragging");
        if (afterElement == null) {
          sortableList.appendChild(
            draggedItem
          );} 
        else {
          sortableList.insertBefore(
            draggedItem,
            afterElement
          );}
      });

    const getDragAfterElement = (
      container, y
    ) => {
      const draggableElements = [
        ...container.querySelectorAll(
          "li:not(.dragging)"
        ),];

      return draggableElements.reduce(
        (closest, child) => {
          const box =
            child.getBoundingClientRect();
          const offset =
            y - box.top - box.height / 2;
          if (
            offset < 0 &&
            offset > closest.offset) {
            return {
              offset: offset,
              element: child,
            };} 
          else {
            return closest;
          }},
        {
          offset: Number.NEGATIVE_INFINITY,
        }
      ).element;
    };

    button.addEventListener('click', (event) => {
      event.preventDefault();
      addForm();
    });

    function createInput(labelText, inputType, name, id, value = '', helpText = '', placeholder = '') {
      return `
        <label for="${id}">
          ${labelText}
          <input type="${inputType}" name="${name}" id="${id}" value="${value}" placeholder="${placeholder}"/>
          ${helpText ? `<span class="help-text">${helpText}</span>` : ''}
        </label>
      `;
    }

    const getFormHtml = (cardType, index) => {
      let html = null;
      if (cardType === 'participatory') {
        html = `
          <div class="card-divider">
            <h2 class="card-title">Card #${index + 1}</h2>
            <button class="remove_dynamic_form button small alert hollow">Remover</button>
          </div>
          <div class="card-section">
            ${createInput('Título', 'text', `items[${index}][title]`, `items_${index}_title`)}
            ${createInput('Link', 'text', `items[${index}][link]`, `items_${index}_link`)}
            ${createInput('Ícone', 'text', `items[${index}][icon]`, `items_${index}_icon`, '', 'Insira aqui o nome do ícone font awesome. Exemplo: fa-calendar, fa-edit, fa-file')}
          </div>
        `;
      } else if (cardType === 'description') {
        html = `
          <div class="card-divider">
            <h2 class="card-title">Card #${index + 1}</h2>
            <button class="remove_dynamic_form button small alert hollow">Remover</button>
          </div>
          <div class="card-section">
            ${createInput('Label', 'text', `items[${index}][label]`, `items_${index}_label`, '', 'Texto que aparecerá no topo do card com fundo azul')}
            ${createInput('Título', 'text', `items[${index}][title]`, `items_${index}_title`, '', 'Título do card')}
            <label for="items_${index}_description">
              Descrição
              <textarea name="items[${index}][description]" id="items_${index}_description"></textarea>
              <span class="help-text">Texto que estará no corpo do card</span>
            </label>
          </div>
        `;
      } else if (cardType === 'step') {
        html = `
          <div class="card-divider">
            <h2 class="card-title">Card #${index + 1}</h2>
            <button class="remove_dynamic_form button small alert hollow">Remover</button>
          </div>
          <div class="card-section">
            ${createInput('Ícone', 'text', `items[${index}][icon]`, `items_${index}_icon`, '', 'Insira aqui o nome do ícone font awesome. Exemplo: fa-calendar, fa-edit, fa-file')}
            ${createInput('Etapa', 'text', `items[${index}][step]`, `items_${index}_step`, '', 'Texto abaixo do ícone')}
            ${createInput('Título', 'text', `items[${index}][title]`, `items_${index}_title`, '', 'Título do card')}
            ${createInput('Data Início', 'text', `items[${index}][start_date]`, `items_${index}_start_date`, '', '', 'dd/mm/yyyy')}
            ${createInput('Data Final', 'text', `items[${index}][end_date]`, `items_${index}_end_date`, '', '', 'dd/mm/yyyy')}
            <label for="items_${index}_description">
              Descrição
              <textarea name="items[${index}][description]" id="items_${index}_description"></textarea>
              <span class="help-text">Texto que estará no corpo do card</span>
            </label>
            <label for="items_${index}_active">
              <input type="checkbox" name="items[${index}][active]" id="items_${index}_active">
              Destacar card
            </label>
          </div>
        `;
      }
      return html;
    }

    const getExistingFormHtml = (cardType, index, item) => {
      let html = null;
      if (cardType === 'participatory') {
        html = `
          <div class="card-divider">
            <h2 class="card-title">Card #${index + 1}</h2>
            <button class="remove_dynamic_form button small alert hollow">Remover</button>
          </div>
          <div class="card-section">
            ${createInput('Título', 'text', `items[${index}][title]`, `items_${index}_title`, item["title"])}
            ${createInput('Link', 'text', `items[${index}][link]`, `items_${index}_link`, item["link"])}
            ${createInput('Ícone', 'text', `items[${index}][icon]`, `items_${index}_icon`, item["icon"], 'Insira aqui o nome do ícone font awesome. Exemplo: fa-calendar, fa-edit, fa-file')}
          </div>
        `;
      } else if (cardType === 'description') {
        html = `
          <div class="card-divider">
            <h2 class="card-title">Card #${index + 1}</h2>
            <button class="remove_dynamic_form button small alert hollow">Remover</button>
          </div>
          <div class="card-section">
            ${createInput('Label', 'text', `items[${index}][label]`, `items_${index}_label`, item["label"], 'Texto que aparecerá no topo do card com fundo azul')}
            ${createInput('Título', 'text', `items[${index}][title]`, `items_${index}_title`, item["title"], 'Título do card')}
            <label for="items_${index}_description">
              Descrição
              <textarea name="items[${index}][description]" id="items_${index}_description">${item["description"]}</textarea>
              <span class="help-text">Texto que estará no corpo do card</span>
            </label>
          </div>
        `;
      } else if (cardType === 'step') {
        html = `
          <div class="card-divider">
            <h2 class="card-title">Card #${index + 1}</h2>
            <button class="remove_dynamic_form button small alert hollow">Remover</button>
          </div>
          <div class="card-section">
            ${createInput('Ícone', 'text', `items[${index}][icon]`, `items_${index}_icon`, item["icon"], 'Insira aqui o nome do ícone font awesome. Exemplo: fa-calendar, fa-edit, fa-file')}
            ${createInput('Etapa', 'text', `items[${index}][step]`, `items_${index}_step`, item["step"], 'Texto abaixo do ícone')}
            ${createInput('Título', 'text', `items[${index}][title]`, `items_${index}_title`, item["title"], 'Título do card')}
            ${createInput('Data Início', 'text', `items[${index}][start_date]`, `items_${index}_start_date`, item["start_date"], '', 'dd/mm/yyyy')}
            ${createInput('Data Final', 'text', `items[${index}][end_date]`, `items_${index}_end_date`, item["end_date"], '','dd/mm/yyyy')}
            <label for="items_${index}_description">
              Descrição
              <textarea name="items[${index}][description]" id="items_${index}_description">${item["description"]}</textarea>
              <span class="help-text">Texto que estará no corpo do card</span>
            </label>
            <label for="items_${index}_active">
              <input type="checkbox" name="items[${index}][active]" id="items_${index}_active" ${item["active"] ? 'checked' : ''}>
              Destacar card
            </label>
          </div>
        `;
      }

      return html;
    }

    const addForm = () => {
      const formCount = container.childElementCount;
      const newForm = document.createElement('li');
      const weight = document.createElement('input');
      
      newForm.classList.add('dynamic-form');
      newForm.setAttribute('draggable', 'true');
      newForm.setAttribute('card-type', cardType);
      weight.setAttribute('type', 'hidden');
      weight.setAttribute('name', `items[${formCount}][weight]`);
      weight.setAttribute('value', formCount);
      weight.classList.add('dynamic-weight');

      newForm.innerHTML = getFormHtml(cardType, formCount);
      newForm.appendChild(weight)

      newForm.querySelector('.remove_dynamic_form').addEventListener('click', (event) => {
        event.preventDefault();
        removeForm(newForm);
      });

      container.appendChild(newForm);
    };

    const addExistingItems = (items) => {
      items.forEach((item, index) => {
        const newForm = document.createElement('li');
        const weight = document.createElement('input');

        newForm.classList.add('dynamic-form');
        newForm.setAttribute('draggable', 'true');
        newForm.setAttribute('data-type', cardType);
        weight.setAttribute('type', 'hidden');
        weight.setAttribute('name', `items[${index}][weight]`);
        weight.setAttribute('value', index);
        weight.classList.add('dynamic-weight');

        newForm.innerHTML = getExistingFormHtml(cardType, index, item);
        newForm.appendChild(weight)

        newForm.querySelector('.remove_dynamic_form').addEventListener('click', (event) => {
          event.preventDefault();
          removeForm(newForm);
        });

        container.appendChild(newForm);
      });
    };

    const removeForm = (form) => {
      form.remove();
      container.setAttribute('items', JSON.stringify(items));
      container.querySelectorAll('.card-title').forEach((title, index) => {
        title.innerHTML = `Card #${index + 1}`;
      });
    };

    if(items) {
      addExistingItems(items);
    }
    
  });
</script>

<style>
  #dynamic__inputs-container li {
    padding: 0;
  }
  .add-form-button-container {
    display: flex;
    justify-content: flex-end;
    margin-top: 1rem;
  }
</style>